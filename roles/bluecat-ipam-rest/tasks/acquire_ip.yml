---
# Acquires a static IP address from Bluecat Address Manager 
# via REST API and creates a DNS entry.  
# Pull back existing IP if host record already exists

- name: Get API Token (expires 5 minutes by default)
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/login?username={{ bluecat_username }}&password={{ bluecat_password }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: api_token_output

- name: Set fact for Bluecat Token
  set_fact: 
    api_token: "{{ api_token_output.content | regex_replace('\"Session Token-> ', '') | regex_replace(' <- for User : .*', '')}}"

- name: Get ID of Configuration entity
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityByName?parentId=0&name={{ bluecat_configuration_name }}&type=Configuration"
    headers: 
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: config_output

- name: Set config fact
  set_fact:
    configurationId: "{{ config_output.json.id }}"
 
- name: Fail if configuration not found
  fail:
    msg: "Configuration ID not found for name <{{ bluecat_configuration_name }}>"
  when: "configurationId == '0'"

- debug: 
    msg: "Config ID is {{ configurationId }}"

- name: Get ID of your view
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityByName?parentId={{ configurationId }}&name={{ bluecat_dns_view }}&type=View"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: view_output

- name: Set view fact
  set_fact:
    viewId: "{{ view_output.json.id }}"

- name: Fail if view not found
  fail:
    msg: "View ID not found for name <{{ bluecat_dns_view }}>"
  when: "viewId == '0'"

- debug:
    msg: "View ID is {{ viewId }}"

# Using curl as I struggled with hint field in uri
- name: Check if host record already exists
  command: > 
    curl -k -H "Authorization: {{ api_token }}" {{ bluecat_url }}/Services/REST/v1/getHostRecordsByHint?containerId={{ viewId }}&start=0&count=1&options="hint=^{{ target_hostname }}$|retrieveFields=false"
  changed_when: false
  register: host_record_output

- name: Set DNS Entry Fact
  set_fact:
    dnsId: "{{ (host_record_output.stdout | from_json | first).id }}"
  when: host_record_output.stdout != "[]"

- name: Get ID of linked IP address
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getLinkedEntities?entityId={{ dnsId }}&type=IP4Address&start=0&count=10"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: linked_ip_output
  when: host_record_output.stdout != "[]"

- name: Zero out ipId from previous role runs
  set_fact:
    ipId: ""

- name: Set Existing IP ID Fact
  set_fact:
    ipId: "{{ (linked_ip_output.json | last).id }}"
  when: host_record_output.stdout != "[]"

- debug:
    msg: "DNS entry exists at ID <{{ dnsId }}> pointing to IP ID <{{ ipId }}>"
  when: host_record_output.stdout != "[]"

- name: Get ID of your network
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getIPRangedByIP?containerId={{ configurationId }}&type=IP4Network&address={{ bluecat_network_cidr | regex_replace('/.*', '') }}"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: network_output

- name: Set network fact
  set_fact:
    networkId: "{{ network_output.json.id }}"

- name: Fail if network not found
  fail:
    msg: "Network ID not found for CIDR <{{ bluecat_network_cidr }}>"
  when: "networkId == '0'"

- debug:
    msg: "Network ID is {{ networkId }}"

## TODO - It would be nice to check for available IPs in the pool before doing the assign next available? 

- name: Assign Next Available static IP in the network
  block:
    # Using command as I struggled with uri to handle address_properties
    - name: Assign Next Available static IP in the network
      command: >
        curl -k -H "Authorization: {{ api_token }}" -X POST {{ bluecat_url }}/Services/REST/v1/assignNextAvailableIP4Address?configurationId={{ configurationId }}&parentId={{ networkId }}&macAddress=""&hostInfo={{ target_hostname }},{{ viewId }},true,false&action=MAKE_STATIC&properties="{{ address_properties }}"
      changed_when: False
      register: assign_ip_output

    - name: Set IP Changed Fact
      set_fact:
        ip_changed: true
      when: assign_ip_output.stdout != "" 
      changed_when: true

    - name: Set IP Address Fact
      set_fact:
        ipId: "{{ (assign_ip_output.stdout | from_json).id }}"
      when: assign_ip_output.stdout != "" 
      changed_when: true

  when: ipId is undefined or ipId == ""

- name: Fail if IP not assigned 
  fail:
    msg: "IP not assigned for network <{{ bluecat_network_cidr }}>"
  when: ipId is undefined or ipId == ""

- name: Execute Quick Deploy for the given network 
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/quickDeploy?entityId={{ networkId }}"
    headers:
      Authorization: "{{ api_token }}"
    method: POST
    validate_certs: "{{ validate_certs }}"
    return_content: yes
    status_code: [-1,0,1,7,200,201]
  when: ip_changed is defined
  changed_when: true
  register: quick_deploy_output

- name: Get IP address record 
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityById?id={{ ipId }}"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: ip_record_output

# Hacky way to get address from properties="locationInherited=true|address=192.168.30.15|state=STATIC|"
- name: Set IP Address Fact
  set_fact:
    ipAddress: "{{ ip_record_output.json.properties | regex_replace('^.*address=', '') | regex_replace('\\|.*', '') }}"

- name: Set the Netmask Fact 
  set_fact:
    ipNetmask: "{{ bluecat_network_cidr | ipaddr('netmask') }}"

- name: Get Network record 
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityById?id={{ networkId }}"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: network_record_output

# Hacky way to get address from properties="CIDR=192.168.240.0/24|locationInherited=true|allowDuplicateHost=disable|inheritAllowDuplicateHost=true|pingBeforeAssign=disable|inheritPingBeforeAssign=true|gateway=192.168.240.1|inheritDefaultDomains=true|inheritDefaultView=true|inheritDNSRestrictions=true|"
- name: Set Gateway Fact
  set_fact:
    ipGateway: "{{ network_record_output.json.properties | regex_replace('^.*gateway=', '') | regex_replace('\\|.*', '') }}"

- debug:
    msg: "IP Address ID is <{{ ipId }}>.  Address is <{{ ipAddress }}>.  Hostname is <{{ target_hostname }}>.  Netmask is <{{ ipNetmask }}>.  Gateway is <{{ ipGateway }}>."

# Do an nslookup to validate deployment??
# Or a  check to confirm target_hostname is in the DNS zone ... 

- name: Logout of API
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/logout"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: logout_output

