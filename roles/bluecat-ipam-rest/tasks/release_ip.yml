---
# Releases a static IP address from Bluecat Address Manager 
# via REST API and removes DNS record.
# If record doesn't exist, do nothing.

- name: Release | Get API Token (expires 5 minutes by default)
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/login?username={{ bluecat_username }}&password={{ bluecat_password }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  no_log: true                # Don't show output as your password will be on the URI string
  register: api_token_output

- name: Release | Set fact for Bluecat Token
  set_fact: 
    api_token: "{{ api_token_output.content | regex_replace('\"Session Token-> ', '') | regex_replace(' <- for User : .*', '')}}"

- name: Release | Get ID of Configuration entity
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityByName?parentId=0&name={{ bluecat_configuration_name }}&type=Configuration"
    headers: 
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: config_output

- name: Release | Set config fact
  set_fact:
    configurationId: "{{ config_output.json.id }}"
 
- name: Release | Fail if configuration not found
  fail:
    msg: "Configuration ID not found for name <{{ bluecat_configuration_name }}>"
  when: "configurationId == '0'"

- debug: 
    msg: "Config ID is {{ configurationId }}"

- name: Release | Get ID of your view
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/getEntityByName?parentId={{ configurationId }}&name={{ bluecat_dns_view }}&type=View"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: view_output

- name: Release | Set view fact
  set_fact:
    viewId: "{{ view_output.json.id }}"

- name: Release | Fail if view not found
  fail:
    msg: "View ID not found for name <{{ bluecat_dns_view }}>"
  when: "viewId == '0'"

- debug:
    msg: "View ID is {{ viewId }}"

# Using curl as I struggled with hint field in uri
- name: Release | Check if host record already exists
  command: > 
    curl -k -H "Authorization: {{ api_token }}" {{ bluecat_url }}/Services/REST/v1/getHostRecordsByHint?containerId={{ viewId }}&start=0&count=1&options="hint=^{{ target_hostname }}$|retrieveFields=false"
  changed_when: false
  register: host_record_output

- name: Release | Zero out DNS Entry Fact
  set_fact:
    dnsId: ""

- name: Release | Set DNS Entry Fact
  set_fact:
    dnsId: "{{ (host_record_output.stdout | from_json | first).id }}"
  when: host_record_output.stdout != "[]"

- name: Release | Delete DNS and IP Record
  block:
    - name: Release | Get ID of linked IP address
      uri:
        url: "{{ bluecat_url }}/Services/REST/v1/getLinkedEntities?entityId={{ dnsId }}&type=IP4Address&start=0&count=10"
        headers:
          Authorization: "{{ api_token }}"
        method: GET
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: linked_ip_output
    
    - name: Release | Set Existing IP ID Fact
      set_fact:
        ipId: "{{ (linked_ip_output.json | last).id }}"

    - name: Release | Find parent parent network of IP
      uri:
        url: "{{ bluecat_url }}/Services/REST/v1/getParent?entityId={{ ipId }}"
        headers:
          Authorization: "{{ api_token }}"
        method: GET
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: network_output

    - name: Release | Set Network Fact
      set_fact:
        networkId: "{{ network_output.json.id }}"

    - debug:
        msg: "Network ID is {{ networkId }}"

    - name: Release | Delete DNS Record
      uri:
        url: "{{ bluecat_url }}/Services/REST/v1/delete?objectId={{ dnsId }}"
        headers:
          Authorization: "{{ api_token }}"
        method: DELETE
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: delete_dns_output

    - name: Release | Delete IP Address Record
      uri:
        url: "{{ bluecat_url }}/Services/REST/v1/delete?objectId={{ ipId }}"
        headers:
          Authorization: "{{ api_token }}"
        method: DELETE
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      register: delete_ip_output

    - name: Release | Execute Quick Deploy for the given network 
      uri:
        url: "{{ bluecat_url }}/Services/REST/v1/quickDeploy?entityId={{ networkId }}"
        headers:
          Authorization: "{{ api_token }}"
        method: POST
        validate_certs: "{{ validate_certs }}"
        return_content: yes
      changed_when: true
      register: quick_deploy_output

  when: dnsId is defined and dnsId != ""

- name: Release | Logout of API
  uri:
    url: "{{ bluecat_url }}/Services/REST/v1/logout"
    headers:
      Authorization: "{{ api_token }}"
    method: GET
    validate_certs: "{{ validate_certs }}"
    return_content: yes
  register: logout_output

